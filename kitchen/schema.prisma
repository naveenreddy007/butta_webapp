// Kitchen Management System Schema
// This schema extends the existing event-menu-planner system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User roles for kitchen staff
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  role      UserRole @default(CHEF)
  phone     String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  assignedEvents Event[]
  cookingLogs    CookingLog[]
  stockUpdates   StockUpdate[]

  @@map("kitchen_users")
}

enum UserRole {
  CHEF
  KITCHEN_MANAGER
  ADMIN
}

// Events (linked from existing system)
model Event {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  date        DateTime
  guestCount  Int       @map("guest_count")
  eventType   String    @map("event_type")
  status      EventStatus @default(PLANNED)
  
  // Menu details from existing system
  menuItems   Json?     @map("menu_items") // Store selected menu items
  
  // Kitchen specific
  assignedChef String?  @map("assigned_chef") @db.Uuid
  chef         User?    @relation(fields: [assignedChef], references: [id])
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  indents     Indent[]
  cookingLogs CookingLog[]
  leftovers   Leftover[]

  @@map("kitchen_events")
  @@index([date])
  @@index([status])
  @@index([assignedChef])
}

enum EventStatus {
  PLANNED
  INDENT_CREATED
  COOKING_STARTED
  COOKING_COMPLETED
  EVENT_COMPLETED
}

// Indent - Food requirements per event
model Indent {
  id          String      @id @default(uuid()) @db.Uuid
  eventId     String      @map("event_id") @db.Uuid
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  status      IndentStatus @default(DRAFT)
  totalItems  Int         @default(0) @map("total_items")
  
  createdBy   String      @map("created_by") @db.Uuid
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  items       IndentItem[]

  @@map("kitchen_indents")
  @@index([status])
  @@index([eventId])
}

enum IndentStatus {
  DRAFT
  SUBMITTED
  APPROVED
  IN_PROGRESS
  COMPLETED
}

// Individual items in an indent
model IndentItem {
  id          String   @id @default(uuid()) @db.Uuid
  indentId    String   @map("indent_id") @db.Uuid
  indent      Indent   @relation(fields: [indentId], references: [id], onDelete: Cascade)
  
  itemName    String   @map("item_name")
  category    String   // Veg, Non-Veg, Beverages, etc.
  quantity    Float
  unit        String   // kg, pieces, liters, etc.
  
  // Stock management
  isInStock   Boolean  @default(false) @map("is_in_stock")
  stockId     String?  @map("stock_id") @db.Uuid
  stock       Stock?   @relation(fields: [stockId], references: [id])
  
  // Cooking tracking
  isReceived  Boolean  @default(false) @map("is_received")
  receivedAt  DateTime? @map("received_at")
  
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("kitchen_indent_items")
}

// Stock/Inventory management
model Stock {
  id          String   @id @default(uuid()) @db.Uuid
  itemName    String   @map("item_name")
  category    String
  quantity    Float
  unit        String
  
  // Inventory details
  expiryDate  DateTime? @map("expiry_date")
  batchNumber String?   @map("batch_number")
  supplier    String?
  costPerUnit Float?    @map("cost_per_unit")
  
  // Status
  isActive    Boolean  @default(true) @map("is_active")
  minStock    Float?   @map("min_stock") // Minimum stock alert level
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  indentItems IndentItem[]
  updates     StockUpdate[]
  leftovers   Leftover[]

  @@map("kitchen_stock")
  @@index([category])
  @@index([isActive])
  @@index([expiryDate])
}

// Stock updates/transactions
model StockUpdate {
  id          String          @id @default(uuid()) @db.Uuid
  stockId     String          @map("stock_id") @db.Uuid
  stock       Stock           @relation(fields: [stockId], references: [id])
  
  type        StockUpdateType
  quantity    Float
  reason      String?
  
  updatedBy   String          @map("updated_by") @db.Uuid
  user        User            @relation(fields: [updatedBy], references: [id])
  
  createdAt   DateTime        @default(now()) @map("created_at")

  @@map("kitchen_stock_updates")
}

enum StockUpdateType {
  ADDED       // New stock received
  USED        // Used for cooking
  EXPIRED     // Expired items removed
  RETURNED    // Leftover returned to stock
  ADJUSTED    // Manual adjustment
}

// Cooking progress tracking
model CookingLog {
  id          String        @id @default(uuid()) @db.Uuid
  eventId     String        @map("event_id") @db.Uuid
  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  dishName    String        @map("dish_name")
  category    String
  servings    Int
  
  status      CookingStatus @default(NOT_STARTED)
  
  // Chef assignment
  assignedTo  String        @map("assigned_to") @db.Uuid
  chef        User          @relation(fields: [assignedTo], references: [id])
  
  // Timing
  startedAt   DateTime?     @map("started_at")
  completedAt DateTime?     @map("completed_at")
  estimatedTime Int?        @map("estimated_time") // in minutes
  
  // Notes and updates
  notes       String?
  priority    Priority      @default(NORMAL)
  
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("kitchen_cooking_logs")
  @@index([status])
  @@index([assignedTo])
  @@index([eventId])
  @@index([priority])
}

enum CookingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Leftover tracking after events
model Leftover {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @map("event_id") @db.Uuid
  event       Event    @relation(fields: [eventId], references: [id])
  
  itemName    String   @map("item_name")
  quantity    Float
  unit        String
  
  // Stock return
  stockId     String?  @map("stock_id") @db.Uuid
  stock       Stock?   @relation(fields: [stockId], references: [id])
  isReturned  Boolean  @default(false) @map("is_returned")
  returnedAt  DateTime? @map("returned_at")
  
  // Costing
  estimatedCost Float? @map("estimated_cost")
  
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("kitchen_leftovers")
}

// Note: Indexes are defined within each model using @@index