/**\n * Direct Table Creation Script\n * \n * This script creates the kitchen tables directly in Supabase\n * using the existing connection\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Environment variables (hardcoded for now)\nconst SUPABASE_URL = 'https://kbonzhebgmehulkdkyas.supabase.co';\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtib256aGViZ21laHVsa2RreWFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1ODY1MjQsImV4cCI6MjA2OTE2MjUyNH0.7yYNyj8i6B0ZZ5C17VsA4SinMUjaOnADPA_T_qBWh-c';\n\n// Create Supabase client\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\n/**\n * Test database connection\n */\nasync function testConnection() {\n  console.log('🔌 Testing Supabase connection...');\n  \n  try {\n    const { data, error } = await supabase\n      .from('kitchen_users')\n      .select('count')\n      .limit(1);\n    \n    if (error && !error.message.includes('does not exist')) {\n      throw error;\n    }\n    \n    console.log('✅ Supabase connection successful');\n    return true;\n  } catch (error) {\n    console.error('❌ Supabase connection failed:', error.message);\n    return false;\n  }\n}\n\n/**\n * Check which tables already exist\n */\nasync function checkExistingTables() {\n  console.log('🔍 Checking existing tables...');\n  \n  const tables = [\n    'kitchen_users',\n    'kitchen_events', \n    'kitchen_stock',\n    'kitchen_stock_updates',\n    'kitchen_indents',\n    'kitchen_indent_items',\n    'kitchen_cooking_logs',\n    'kitchen_leftovers'\n  ];\n  \n  const existingTables = [];\n  \n  for (const table of tables) {\n    try {\n      const { data, error } = await supabase\n        .from(table)\n        .select('*')\n        .limit(1);\n      \n      if (!error || !error.message.includes('does not exist')) {\n        existingTables.push(table);\n        console.log(`   ✅ Table ${table} exists`);\n      } else {\n        console.log(`   ❌ Table ${table} missing`);\n      }\n    } catch (error) {\n      console.log(`   ❌ Table ${table} missing`);\n    }\n  }\n  \n  return existingTables;\n}\n\n/**\n * Insert sample data into existing tables\n */\nasync function insertSampleData() {\n  console.log('📊 Inserting sample data...');\n  \n  try {\n    // Insert sample users\n    const { error: usersError } = await supabase\n      .from('kitchen_users')\n      .upsert([\n        {\n          id: '550e8400-e29b-41d4-a716-446655440001',\n          email: 'chef@butta.com',\n          name: 'John Chef',\n          role: 'CHEF',\n          phone: '+1234567890',\n          is_active: true\n        },\n        {\n          id: '550e8400-e29b-41d4-a716-446655440002', \n          email: 'manager@butta.com',\n          name: 'Sarah Manager',\n          role: 'KITCHEN_MANAGER',\n          phone: '+1234567891',\n          is_active: true\n        },\n        {\n          id: '550e8400-e29b-41d4-a716-446655440003',\n          email: 'admin@butta.com',\n          name: 'Admin User',\n          role: 'ADMIN',\n          phone: '+1234567892',\n          is_active: true\n        }\n      ], { onConflict: 'email' });\n    \n    if (!usersError) {\n      console.log('   ✅ Sample users inserted');\n    } else {\n      console.log('   ⚠️  Users table not ready:', usersError.message);\n    }\n    \n    // Insert sample events\n    const { error: eventsError } = await supabase\n      .from('kitchen_events')\n      .upsert([\n        {\n          id: 'event-001',\n          name: 'Smith Wedding Reception',\n          date: '2024-12-15T18:00:00Z',\n          guest_count: 150,\n          event_type: 'Wedding',\n          status: 'PLANNED',\n          assigned_chef: '550e8400-e29b-41d4-a716-446655440001'\n        },\n        {\n          id: 'event-002',\n          name: 'Corporate Annual Dinner',\n          date: '2024-12-20T19:00:00Z',\n          guest_count: 200,\n          event_type: 'Corporate',\n          status: 'PLANNED',\n          assigned_chef: '550e8400-e29b-41d4-a716-446655440002'\n        }\n      ], { onConflict: 'id' });\n    \n    if (!eventsError) {\n      console.log('   ✅ Sample events inserted');\n    } else {\n      console.log('   ⚠️  Events table not ready:', eventsError.message);\n    }\n    \n    // Insert sample stock\n    const { error: stockError } = await supabase\n      .from('kitchen_stock')\n      .upsert([\n        {\n          id: 'stock-001',\n          item_name: 'Basmati Rice',\n          category: 'Grains',\n          quantity: 100.00,\n          unit: 'kg',\n          cost_per_unit: 2.50,\n          min_stock: 20.00,\n          is_active: true\n        },\n        {\n          id: 'stock-002',\n          item_name: 'Chicken Breast',\n          category: 'Meat',\n          quantity: 50.00,\n          unit: 'kg',\n          cost_per_unit: 8.00,\n          min_stock: 10.00,\n          is_active: true\n        },\n        {\n          id: 'stock-003',\n          item_name: 'Tomatoes',\n          category: 'Vegetables',\n          quantity: 25.00,\n          unit: 'kg',\n          cost_per_unit: 3.00,\n          min_stock: 5.00,\n          is_active: true\n        }\n      ], { onConflict: 'id' });\n    \n    if (!stockError) {\n      console.log('   ✅ Sample stock inserted');\n    } else {\n      console.log('   ⚠️  Stock table not ready:', stockError.message);\n    }\n    \n  } catch (error) {\n    console.error('❌ Sample data insertion failed:', error.message);\n  }\n}\n\n/**\n * Main setup function\n */\nasync function setupKitchenTables() {\n  console.log('🚀 Kitchen Module Table Setup');\n  console.log('==============================\\n');\n  \n  // Step 1: Test connection\n  const connected = await testConnection();\n  if (!connected) {\n    console.log('\\n💡 Connection failed. Please check your Supabase configuration.');\n    return;\n  }\n  \n  // Step 2: Check existing tables\n  const existingTables = await checkExistingTables();\n  \n  if (existingTables.length === 0) {\n    console.log('\\n📋 No Kitchen Tables Found');\n    console.log('============================');\n    console.log('You need to create the kitchen tables manually.');\n    console.log('\\n🔧 Manual Setup Required:');\n    console.log('1. Go to Supabase Dashboard > SQL Editor');\n    console.log('2. Copy the contents of: kitchen/sql/create-tables.sql');\n    console.log('3. Paste and run the SQL script');\n    console.log('4. Run this setup script again');\n    console.log('\\n📄 SQL File Location: kitchen/sql/create-tables.sql');\n    return;\n  }\n  \n  // Step 3: Insert sample data\n  await insertSampleData();\n  \n  console.log('\\n🎉 Kitchen Module setup completed!');\n  console.log('\\n📊 Setup Summary:');\n  console.log(`   ✅ Database connected`);\n  console.log(`   ✅ Tables found: ${existingTables.length}/8`);\n  console.log(`   ✅ Sample data inserted`);\n  \n  console.log('\\n🔑 Test Users Created:');\n  console.log('   - chef@butta.com (CHEF)');\n  console.log('   - manager@butta.com (KITCHEN_MANAGER)');\n  console.log('   - admin@butta.com (ADMIN)');\n  \n  console.log('\\n🚀 Next Steps:');\n  console.log('   1. Set up DATABASE_URL in .env.local');\n  console.log('   2. Run: npm run prisma:generate');\n  console.log('   3. Test Prisma connection');\n  console.log('   4. Start development: npm run dev');\n  \n  if (existingTables.length < 8) {\n    console.log('\\n⚠️  Some tables are missing. For full functionality:');\n    console.log('   - Run the SQL script in Supabase Dashboard');\n    console.log('   - Then run this setup script again');\n  }\n}\n\n// Run setup\nsetupKitchenTables().catch(error => {\n  console.error('\\n❌ Setup failed:', error.message);\n  process.exit(1);\n});"