/**\n * Test Prisma Setup Script\n * \n * This script tests the Prisma + Supabase integration\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\n// Supabase configuration\nconst SUPABASE_URL = 'https://kbonzhebgmehulkdkyas.supabase.co';\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtib256aGViZ21laHVsa2RreWFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1ODY1MjQsImV4cCI6MjA2OTE2MjUyNH0.7yYNyj8i6B0ZZ5C17VsA4SinMUjaOnADPA_T_qBWh-c';\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\nasync function testPrismaSetup() {\n  console.log('🧪 Testing Prisma Setup');\n  console.log('========================\\n');\n\n  try {\n    // Test 1: Connection\n    console.log('1️⃣ Testing connection...');\n    const { data: connectionTest, error: connectionError } = await supabase\n      .from('kitchen_users')\n      .select('count')\n      .limit(1);\n    \n    if (connectionError && !connectionError.message.includes('does not exist')) {\n      throw new Error(`Connection failed: ${connectionError.message}`);\n    }\n    console.log('✅ Connection successful\\n');\n\n    // Test 2: Check tables\n    console.log('2️⃣ Checking tables...');\n    const tables = {\n      'kitchen_users': 'Users',\n      'kitchen_events': 'Events',\n      'kitchen_stock': 'Stock',\n      'kitchen_cooking_logs': 'Cooking Logs',\n      'kitchen_indents': 'Indents',\n      'kitchen_indent_items': 'Indent Items',\n      'kitchen_stock_updates': 'Stock Updates',\n      'kitchen_leftovers': 'Leftovers'\n    };\n\n    const results = {};\n    for (const [table, name] of Object.entries(tables)) {\n      try {\n        const { data, error } = await supabase.from(table).select('*').limit(1);\n        if (!error) {\n          results[table] = '✅';\n          console.log(`   ✅ ${name} table ready`);\n        } else {\n          results[table] = '❌';\n          console.log(`   ❌ ${name} table missing`);\n        }\n      } catch (e) {\n        results[table] = '❌';\n        console.log(`   ❌ ${name} table missing`);\n      }\n    }\n    console.log('');\n\n    // Test 3: Data operations\n    console.log('3️⃣ Testing data operations...');\n    \n    // Test users\n    if (results['kitchen_users'] === '✅') {\n      const { data: users, error } = await supabase\n        .from('kitchen_users')\n        .select('*')\n        .limit(3);\n      \n      if (!error && users) {\n        console.log(`   ✅ Users: ${users.length} records found`);\n        users.forEach(user => {\n          console.log(`      - ${user.name} (${user.role})`);\n        });\n      } else {\n        console.log('   ⚠️  No users found');\n      }\n    }\n\n    // Test events\n    if (results['kitchen_events'] === '✅') {\n      const { data: events, error } = await supabase\n        .from('kitchen_events')\n        .select('*')\n        .limit(3);\n      \n      if (!error && events) {\n        console.log(`   ✅ Events: ${events.length} records found`);\n        events.forEach(event => {\n          console.log(`      - ${event.name} (${event.guest_count} guests)`);\n        });\n      } else {\n        console.log('   ⚠️  No events found');\n      }\n    }\n\n    // Test stock\n    if (results['kitchen_stock'] === '✅') {\n      const { data: stock, error } = await supabase\n        .from('kitchen_stock')\n        .select('*')\n        .limit(3);\n      \n      if (!error && stock) {\n        console.log(`   ✅ Stock: ${stock.length} items found`);\n        stock.forEach(item => {\n          console.log(`      - ${item.item_name} (${item.quantity} ${item.unit})`);\n        });\n      } else {\n        console.log('   ⚠️  No stock items found');\n      }\n    }\n    console.log('');\n\n    // Test 4: Prisma client (if available)\n    console.log('4️⃣ Testing Prisma client...');\n    try {\n      // Try to import Prisma client\n      const { PrismaClient } = await import('@prisma/client');\n      \n      if (process.env.DATABASE_URL) {\n        const prisma = new PrismaClient();\n        await prisma.$queryRaw`SELECT 1`;\n        console.log('   ✅ Prisma client working');\n        await prisma.$disconnect();\n      } else {\n        console.log('   ⚠️  DATABASE_URL not set - Prisma client not available');\n        console.log('      (This is OK - you can use Supabase client)');\n      }\n    } catch (error) {\n      console.log('   ⚠️  Prisma client not available:', error.message);\n      console.log('      (This is OK - you can use Supabase client)');\n    }\n    console.log('');\n\n    // Summary\n    const readyTables = Object.values(results).filter(r => r === '✅').length;\n    const totalTables = Object.keys(results).length;\n    \n    console.log('🎉 Test Results Summary');\n    console.log('=======================');\n    console.log(`✅ Connection: Working`);\n    console.log(`✅ Tables: ${readyTables}/${totalTables} ready`);\n    console.log(`✅ Data Operations: Working`);\n    console.log(`✅ Kitchen Module: Ready to use`);\n    \n    if (readyTables < totalTables) {\n      console.log('');\n      console.log('⚠️  Missing Tables:');\n      console.log('   Some tables are missing. Run the SQL script in Supabase Dashboard.');\n      console.log('   File: kitchen/sql/create-tables.sql');\n    }\n    \n    console.log('');\n    console.log('🚀 Ready to Start Development!');\n    console.log('   Run: npm run dev');\n\n  } catch (error) {\n    console.error('\\n❌ Test failed:', error.message);\n    console.error('\\n💡 Troubleshooting:');\n    console.error('   1. Check Supabase project is active');\n    console.error('   2. Run: node kitchen/scripts/setup-prisma-tables.js');\n    console.error('   3. Verify network connection');\n    process.exit(1);\n  }\n}\n\ntestPrismaSetup();"