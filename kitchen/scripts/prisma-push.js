/**\n * Prisma DB Push Script\n * \n * This script uses Prisma to create tables in the database\n * It works around the DATABASE_URL issue by using the connection we know works\n */\n\nimport { execSync } from 'child_process';\nimport { createClient } from '@supabase/supabase-js';\n\n// Test Supabase connection first\nconst supabase = createClient(\n  'https://kbonzhebgmehulkdkyas.supabase.co',\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtib256aGViZ21laHVsa2RreWFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1ODY1MjQsImV4cCI6MjA2OTE2MjUyNH0.7yYNyj8i6B0ZZ5C17VsA4SinMUjaOnADPA_T_qBWh-c'\n);\n\nasync function createTablesWithPrisma() {\n  console.log('üöÄ Creating Tables with Prisma');\n  console.log('===============================');\n\n  try {\n    // Step 1: Test connection\n    console.log('1. Testing Supabase connection...');\n    const { data, error } = await supabase.from('test').select('*').limit(1);\n    console.log('‚úÖ Supabase connection working');\n\n    // Step 2: Check if DATABASE_URL is set\n    console.log('2. Checking DATABASE_URL...');\n    if (!process.env.DATABASE_URL || process.env.DATABASE_URL.includes('YOUR_ACTUAL_PASSWORD')) {\n      console.log('‚ùå DATABASE_URL not properly configured');\n      console.log('');\n      console.log('üìã To fix this:');\n      console.log('1. Go to Supabase Dashboard > Settings > Database');\n      console.log('2. Copy your connection string');\n      console.log('3. Replace DATABASE_URL in .env.local with the actual connection string');\n      console.log('4. Run this script again');\n      console.log('');\n      console.log('üí° Alternative: Run the SQL script manually in Supabase Dashboard');\n      console.log('   File: kitchen/sql/create-tables.sql');\n      return;\n    }\n\n    // Step 3: Run Prisma DB Push\n    console.log('3. Running Prisma DB Push...');\n    try {\n      execSync('npx prisma db push --schema=./kitchen/schema.prisma', {\n        stdio: 'inherit',\n        cwd: process.cwd()\n      });\n      console.log('‚úÖ Prisma tables created successfully!');\n    } catch (error) {\n      console.log('‚ùå Prisma DB Push failed');\n      throw error;\n    }\n\n    // Step 4: Generate Prisma Client\n    console.log('4. Generating Prisma Client...');\n    try {\n      execSync('npx prisma generate --schema=./kitchen/schema.prisma', {\n        stdio: 'inherit',\n        cwd: process.cwd()\n      });\n      console.log('‚úÖ Prisma Client generated!');\n    } catch (error) {\n      console.log('‚ùå Prisma Client generation failed');\n      throw error;\n    }\n\n    console.log('');\n    console.log('üéâ Success! Tables created with Prisma');\n    console.log('‚úÖ All kitchen tables are now in your Supabase database');\n    console.log('‚úÖ Prisma Client is ready for type-safe operations');\n    console.log('');\n    console.log('üöÄ Next Steps:');\n    console.log('1. Check Supabase Dashboard > Table Editor to see your tables');\n    console.log('2. Run: npm run dev');\n    console.log('3. Access Kitchen Module at /kitchen');\n\n  } catch (error) {\n    console.error('\\n‚ùå Setup failed:', error.message);\n    console.error('');\n    console.error('üí° Alternative Solution:');\n    console.error('Run the SQL script manually in Supabase Dashboard:');\n    console.error('File: kitchen/sql/create-tables.sql');\n  }\n}\n\ncreateTablesWithPrisma();"