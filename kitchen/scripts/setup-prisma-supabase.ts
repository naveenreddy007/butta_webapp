/**\n * Prisma + Supabase Setup Script\n * \n * This script sets up Prisma to work with the existing Supabase database\n */\n\nimport { dbUtils, seedUtils } from '../lib/prisma-supabase.js';\n\nasync function setupPrismaSupabase() {\n  console.log('üöÄ Prisma + Supabase Setup');\n  console.log('===========================\\n');\n\n  try {\n    // Step 1: Test Supabase connection\n    console.log('1Ô∏è‚É£ Testing Supabase connection...');\n    const supabaseConnected = await dbUtils.testSupabaseConnection();\n    if (!supabaseConnected) {\n      throw new Error('Supabase connection failed');\n    }\n    console.log('‚úÖ Supabase connected successfully\\n');\n\n    // Step 2: Check existing tables\n    console.log('2Ô∏è‚É£ Checking database tables...');\n    const existingTables = await dbUtils.checkTablesExist();\n    console.log(`Found ${existingTables.length}/8 tables`);\n    \n    if (existingTables.length === 0) {\n      console.log('\\n‚ùå No kitchen tables found!');\n      console.log('\\nüìã Manual Setup Required:');\n      console.log('1. Go to Supabase Dashboard > SQL Editor');\n      console.log('2. Copy and run: kitchen/sql/create-tables.sql');\n      console.log('3. Run this script again');\n      return;\n    }\n    console.log('');\n\n    // Step 3: Test Prisma connection (if DATABASE_URL is set)\n    console.log('3Ô∏è‚É£ Testing Prisma connection...');\n    const prismaConnected = await dbUtils.testPrismaConnection();\n    if (prismaConnected) {\n      console.log('‚úÖ Prisma connected successfully');\n    } else {\n      console.log('‚ö†Ô∏è  Prisma not connected (DATABASE_URL not set)');\n      console.log('   This is OK - you can use Supabase client for now');\n    }\n    console.log('');\n\n    // Step 4: Create default users\n    console.log('4Ô∏è‚É£ Creating default users...');\n    const usersCreated = await seedUtils.createDefaultUsers();\n    if (usersCreated) {\n      console.log('‚úÖ Default users created');\n    } else {\n      console.log('‚ö†Ô∏è  Could not create users (table may not exist)');\n    }\n    console.log('');\n\n    // Step 5: Create sample data\n    console.log('5Ô∏è‚É£ Creating sample data...');\n    const sampleDataCreated = await seedUtils.createSampleData();\n    if (sampleDataCreated) {\n      console.log('‚úÖ Sample data created');\n    } else {\n      console.log('‚ö†Ô∏è  Could not create sample data (tables may not exist)');\n    }\n    console.log('');\n\n    // Step 6: Summary\n    console.log('üéâ Setup completed successfully!');\n    console.log('');\n    console.log('üìã What\\'s Ready:');\n    console.log('   ‚úÖ Supabase connection working');\n    console.log(`   ‚úÖ Database tables: ${existingTables.length}/8`);\n    console.log('   ‚úÖ Sample data inserted');\n    console.log('   ‚úÖ Kitchen module ready to use');\n    console.log('');\n    console.log('üîë Test Users:');\n    console.log('   - chef@butta.com (CHEF)');\n    console.log('   - manager@butta.com (KITCHEN_MANAGER)');\n    console.log('   - admin@butta.com (ADMIN)');\n    console.log('');\n    console.log('üöÄ Next Steps:');\n    console.log('   1. Start development: npm run dev');\n    console.log('   2. Access Kitchen Dashboard');\n    console.log('   3. Test all functionality');\n    \n    if (!prismaConnected) {\n      console.log('');\n      console.log('üí° Optional - Enable Prisma:');\n      console.log('   1. Get your database password from Supabase Dashboard');\n      console.log('   2. Set DATABASE_URL in .env.local');\n      console.log('   3. Run: npm run prisma:generate');\n      console.log('   4. Enjoy type-safe database operations!');\n    }\n\n    if (existingTables.length < 8) {\n      console.log('');\n      console.log('‚ö†Ô∏è  Missing Tables:');\n      console.log('   Some tables are missing for full functionality.');\n      console.log('   Run the SQL script in Supabase Dashboard to create all tables.');\n    }\n\n  } catch (error: any) {\n    console.error('‚ùå Setup failed:', error.message);\n    console.error('');\n    console.error('üí° Troubleshooting:');\n    console.error('   1. Check Supabase project is active');\n    console.error('   2. Verify SUPABASE_URL and SUPABASE_ANON_KEY');\n    console.error('   3. Ensure tables are created in Supabase');\n    console.error('   4. Check network connection');\n    process.exit(1);\n  }\n}\n\n// Run setup if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  setupPrismaSupabase();\n}\n\nexport { setupPrismaSupabase };"