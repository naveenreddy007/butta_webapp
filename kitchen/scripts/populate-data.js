import { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  'https://kbonzhebgmehulkdkyas.supabase.co',\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtib256aGViZ21laHVsa2RreWFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1ODY1MjQsImV4cCI6MjA2OTE2MjUyNH0.7yYNyj8i6B0ZZ5C17VsA4SinMUjaOnADPA_T_qBWh-c'\n);\n\nasync function populateData() {\n  console.log('üöÄ Populating Kitchen Database with Sample Data');\n  console.log('===============================================');\n\n  try {\n    // Test connection\n    console.log('üîå Testing connection...');\n    const { data, error } = await supabase.from('kitchen_users').select('count').limit(1);\n    \n    if (error && !error.message.includes('does not exist')) {\n      console.error('‚ùå Connection failed:', error.message);\n      return;\n    }\n    \n    console.log('‚úÖ Connected to Supabase\\n');\n\n    // 1. Populate Users\n    console.log('üë• Populating Users...');\n    const users = [\n      {\n        id: '550e8400-e29b-41d4-a716-446655440001',\n        email: 'chef@butta.com',\n        name: 'John Chef',\n        role: 'CHEF',\n        phone: '+91 98765 43210',\n        is_active: true\n      },\n      {\n        id: '550e8400-e29b-41d4-a716-446655440002',\n        email: 'manager@butta.com',\n        name: 'Sarah Manager',\n        role: 'KITCHEN_MANAGER',\n        phone: '+91 98765 43211',\n        is_active: true\n      },\n      {\n        id: '550e8400-e29b-41d4-a716-446655440003',\n        email: 'admin@butta.com',\n        name: 'Admin User',\n        role: 'ADMIN',\n        phone: '+91 98765 43212',\n        is_active: true\n      },\n      {\n        id: '550e8400-e29b-41d4-a716-446655440004',\n        email: 'chef2@butta.com',\n        name: 'Maria Rodriguez',\n        role: 'CHEF',\n        phone: '+91 98765 43213',\n        is_active: true\n      },\n      {\n        id: '550e8400-e29b-41d4-a716-446655440005',\n        email: 'chef3@butta.com',\n        name: 'Raj Patel',\n        role: 'CHEF',\n        phone: '+91 98765 43214',\n        is_active: true\n      }\n    ];\n\n    const { error: usersError } = await supabase\n      .from('kitchen_users')\n      .upsert(users, { onConflict: 'email' });\n    \n    if (!usersError) {\n      console.log('   ‚úÖ Users populated (5 users)');\n    } else {\n      console.log('   ‚ö†Ô∏è Users error:', usersError.message);\n    }\n\n    // 2. Populate Events\n    console.log('üéâ Populating Events...');\n    const events = [\n      {\n        id: 'event-001',\n        name: 'Smith Wedding Reception',\n        date: '2024-12-15T18:00:00Z',\n        guest_count: 150,\n        event_type: 'Wedding',\n        status: 'PLANNED',\n        assigned_chef: '550e8400-e29b-41d4-a716-446655440001',\n        menu_items: {\n          appetizers: ['Paneer Tikka', 'Chicken Wings', 'Vegetable Samosas'],\n          mains: ['Butter Chicken', 'Dal Makhani', 'Biryani', 'Naan'],\n          desserts: ['Gulab Jamun', 'Ice Cream', 'Wedding Cake']\n        }\n      },\n      {\n        id: 'event-002',\n        name: 'Corporate Annual Dinner',\n        date: '2024-12-20T19:00:00Z',\n        guest_count: 200,\n        event_type: 'Corporate',\n        status: 'PLANNED',\n        assigned_chef: '550e8400-e29b-41d4-a716-446655440002',\n        menu_items: {\n          appetizers: ['Caesar Salad', 'Soup of the Day'],\n          mains: ['Grilled Chicken', 'Vegetarian Pasta', 'Rice Pilaf'],\n          desserts: ['Chocolate Mousse', 'Fresh Fruit']\n        }\n      },\n      {\n        id: 'event-003',\n        name: 'Birthday Party - Sharma Family',\n        date: '2024-12-10T16:00:00Z',\n        guest_count: 50,\n        event_type: 'Birthday',\n        status: 'COOKING_STARTED',\n        assigned_chef: '550e8400-e29b-41d4-a716-446655440004',\n        menu_items: {\n          appetizers: ['Mini Pizzas', 'Chicken Nuggets'],\n          mains: ['Fried Rice', 'Manchurian', 'Rotis'],\n          desserts: ['Birthday Cake', 'Ice Cream']\n        }\n      },\n      {\n        id: 'event-004',\n        name: 'Conference Lunch',\n        date: '2024-12-08T12:00:00Z',\n        guest_count: 80,\n        event_type: 'Corporate',\n        status: 'COMPLETED',\n        assigned_chef: '550e8400-e29b-41d4-a716-446655440005',\n        menu_items: {\n          appetizers: ['Welcome Drinks', 'Snacks'],\n          mains: ['Lunch Boxes', 'Beverages'],\n          desserts: ['Sweets']\n        }\n      },\n      {\n        id: 'event-005',\n        name: 'Anniversary Celebration',\n        date: '2024-12-25T19:30:00Z',\n        guest_count: 120,\n        event_type: 'Anniversary',\n        status: 'PLANNED',\n        assigned_chef: '550e8400-e29b-41d4-a716-446655440001',\n        menu_items: {\n          appetizers: ['Cocktail Snacks', 'Chaat Counter'],\n          mains: ['Multi-cuisine Buffet'],\n          desserts: ['Anniversary Cake', 'Dessert Counter']\n        }\n      }\n    ];\n\n    const { error: eventsError } = await supabase\n      .from('kitchen_events')\n      .upsert(events, { onConflict: 'id' });\n    \n    if (!eventsError) {\n      console.log('   ‚úÖ Events populated (5 events)');\n    } else {\n      console.log('   ‚ö†Ô∏è Events error:', eventsError.message);\n    }\n\n    // 3. Populate Stock\n    console.log('üì¶ Populating Stock...');\n    const stock = [\n      // Grains & Cereals\n      {\n        id: 'stock-001',\n        item_name: 'Basmati Rice',\n        category: 'Grains',\n        quantity: 100.00,\n        unit: 'kg',\n        cost_per_unit: 2.50,\n        min_stock: 20.00,\n        supplier: 'Rice Traders Ltd',\n        batch_number: 'BR2024001',\n        expiry_date: '2025-06-15T00:00:00Z',\n        is_active: true\n      },\n      {\n        id: 'stock-002',\n        item_name: 'Wheat Flour',\n        category: 'Grains',\n        quantity: 75.00,\n        unit: 'kg',\n        cost_per_unit: 1.80,\n        min_stock: 15.00,\n        supplier: 'Flour Mills Co',\n        batch_number: 'WF2024001',\n        expiry_date: '2025-03-20T00:00:00Z',\n        is_active: true\n      },\n      // Proteins\n      {\n        id: 'stock-003',\n        item_name: 'Chicken Breast',\n        category: 'Meat',\n        quantity: 50.00,\n        unit: 'kg',\n        cost_per_unit: 8.00,\n        min_stock: 10.00,\n        supplier: 'Fresh Meat Suppliers',\n        batch_number: 'CB2024001',\n        expiry_date: '2024-12-12T00:00:00Z',\n        is_active: true\n      },\n      {\n        id: 'stock-004',\n        item_name: 'Paneer',\n        category: 'Dairy',\n        quantity: 25.00,\n        unit: 'kg',\n        cost_per_unit: 12.00,\n        min_stock: 5.00,\n        supplier: 'Dairy Fresh',\n        batch_number: 'PN2024001',\n        expiry_date: '2024-12-15T00:00:00Z',\n        is_active: true\n      },\n      // Vegetables\n      {\n        id: 'stock-005',\n        item_name: 'Tomatoes',\n        category: 'Vegetables',\n        quantity: 30.00,\n        unit: 'kg',\n        cost_per_unit: 3.00,\n        min_stock: 8.00,\n        supplier: 'Farm Fresh Vegetables',\n        batch_number: 'TM2024001',\n        expiry_date: '2024-12-10T00:00:00Z',\n        is_active: true\n      },\n      {\n        id: 'stock-006',\n        item_name: 'Onions',\n        category: 'Vegetables',\n        quantity: 40.00,\n        unit: 'kg',\n        cost_per_unit: 2.00,\n        min_stock: 10.00,\n        supplier: 'Farm Fresh Vegetables',\n        batch_number: 'ON2024001',\n        expiry_date: '2025-01-15T00:00:00Z',\n        is_active: true\n      },\n      {\n        id: 'stock-007',\n        item_name: 'Potatoes',\n        category: 'Vegetables',\n        quantity: 60.00,\n        unit: 'kg',\n        cost_per_unit: 1.50,\n        min_stock: 15.00,\n        supplier: 'Farm Fresh Vegetables',\n        batch_number: 'PT2024001',\n        expiry_date: '2025-02-01T00:00:00Z',\n        is_active: true\n      },\n      // Spices & Seasonings\n      {\n        id: 'stock-008',\n        item_name: 'Garam Masala',\n        category: 'Spices',\n        quantity: 5.00,\n        unit: 'kg',\n        cost_per_unit: 25.00,\n        min_stock: 1.00,\n        supplier: 'Spice World',\n        batch_number: 'GM2024001',\n        expiry_date: '2025-12-31T00:00:00Z',\n        is_active: true\n      },\n      {\n        id: 'stock-009',\n        item_name: 'Turmeric Powder',\n        category: 'Spices',\n        quantity: 3.00,\n        unit: 'kg',\n        cost_per_unit: 15.00,\n        min_stock: 0.5,\n        supplier: 'Spice World',\n        batch_number: 'TP2024001',\n        expiry_date: '2025-12-31T00:00:00Z',\n        is_active: true\n      },\n      // Oils & Fats\n      {\n        id: 'stock-010',\n        item_name: 'Cooking Oil',\n        category: 'Oils',\n        quantity: 20.00,\n        unit: 'liters',\n        cost_per_unit: 4.50,\n        min_stock: 5.00,\n        supplier: 'Oil Distributors',\n        batch_number: 'CO2024001',\n        expiry_date: '2025-08-30T00:00:00Z',\n        is_active: true\n      },\n      // Low stock items (for alerts)\n      {\n        id: 'stock-011',\n        item_name: 'Salt',\n        category: 'Seasonings',\n        quantity: 2.00,\n        unit: 'kg',\n        cost_per_unit: 1.00,\n        min_stock: 5.00,\n        supplier: 'Salt Works',\n        batch_number: 'SL2024001',\n        expiry_date: '2026-12-31T00:00:00Z',\n        is_active: true\n      },\n      // Expiring soon items\n      {\n        id: 'stock-012',\n        item_name: 'Fresh Cream',\n        category: 'Dairy',\n        quantity: 10.00,\n        unit: 'liters',\n        cost_per_unit: 6.00,\n        min_stock: 3.00,\n        supplier: 'Dairy Fresh',\n        batch_number: 'FC2024001',\n        expiry_date: '2024-12-05T00:00:00Z',\n        is_active: true\n      }\n    ];\n\n    const { error: stockError } = await supabase\n      .from('kitchen_stock')\n      .upsert(stock, { onConflict: 'id' });\n    \n    if (!stockError) {\n      console.log('   ‚úÖ Stock populated (12 items)');\n    } else {\n      console.log('   ‚ö†Ô∏è Stock error:', stockError.message);\n    }\n\n    // 4. Populate Cooking Logs\n    console.log('üë®‚Äçüç≥ Populating Cooking Logs...');\n    const cookingLogs = [\n      {\n        id: 'cooking-001',\n        event_id: 'event-003',\n        dish_name: 'Chicken Biryani',\n        category: 'Main Course',\n        servings: 50,\n        status: 'IN_PROGRESS',\n        assigned_to: '550e8400-e29b-41d4-a716-446655440004',\n        started_at: '2024-12-10T14:00:00Z',\n        estimated_time: 120,\n        priority: 'HIGH',\n        notes: 'Birthday special - extra spicy as requested'\n      },\n      {\n        id: 'cooking-002',\n        event_id: 'event-003',\n        dish_name: 'Vegetable Fried Rice',\n        category: 'Main Course',\n        servings: 30,\n        status: 'COMPLETED',\n        assigned_to: '550e8400-e29b-41d4-a716-446655440004',\n        started_at: '2024-12-10T13:30:00Z',\n        completed_at: '2024-12-10T14:30:00Z',\n        estimated_time: 60,\n        priority: 'NORMAL',\n        notes: 'Completed ahead of schedule'\n      },\n      {\n        id: 'cooking-003',\n        event_id: 'event-001',\n        dish_name: 'Paneer Tikka',\n        category: 'Appetizer',\n        servings: 150,\n        status: 'NOT_STARTED',\n        assigned_to: '550e8400-e29b-41d4-a716-446655440001',\n        estimated_time: 90,\n        priority: 'NORMAL',\n        notes: 'Marinate 2 hours before cooking'\n      },\n      {\n        id: 'cooking-004',\n        event_id: 'event-001',\n        dish_name: 'Butter Chicken',\n        category: 'Main Course',\n        servings: 150,\n        status: 'NOT_STARTED',\n        assigned_to: '550e8400-e29b-41d4-a716-446655440001',\n        estimated_time: 150,\n        priority: 'HIGH',\n        notes: 'Signature dish - ensure quality'\n      },\n      {\n        id: 'cooking-005',\n        event_id: 'event-002',\n        dish_name: 'Caesar Salad',\n        category: 'Appetizer',\n        servings: 200,\n        status: 'NOT_STARTED',\n        assigned_to: '550e8400-e29b-41d4-a716-446655440002',\n        estimated_time: 45,\n        priority: 'LOW',\n        notes: 'Prepare dressing separately'\n      }\n    ];\n\n    const { error: cookingError } = await supabase\n      .from('kitchen_cooking_logs')\n      .upsert(cookingLogs, { onConflict: 'id' });\n    \n    if (!cookingError) {\n      console.log('   ‚úÖ Cooking logs populated (5 tasks)');\n    } else {\n      console.log('   ‚ö†Ô∏è Cooking logs error:', cookingError.message);\n    }\n\n    // 5. Populate Indents\n    console.log('üìã Populating Indents...');\n    const indents = [\n      {\n        id: 'indent-001',\n        event_id: 'event-001',\n        status: 'APPROVED',\n        total_items: 8,\n        created_by: '550e8400-e29b-41d4-a716-446655440001'\n      },\n      {\n        id: 'indent-002',\n        event_id: 'event-002',\n        status: 'SUBMITTED',\n        total_items: 5,\n        created_by: '550e8400-e29b-41d4-a716-446655440002'\n      },\n      {\n        id: 'indent-003',\n        event_id: 'event-005',\n        status: 'DRAFT',\n        total_items: 12,\n        created_by: '550e8400-e29b-41d4-a716-446655440001'\n      }\n    ];\n\n    const { error: indentsError } = await supabase\n      .from('kitchen_indents')\n      .upsert(indents, { onConflict: 'id' });\n    \n    if (!indentsError) {\n      console.log('   ‚úÖ Indents populated (3 indents)');\n    } else {\n      console.log('   ‚ö†Ô∏è Indents error:', indentsError.message);\n    }\n\n    // 6. Populate Indent Items\n    console.log('üìù Populating Indent Items...');\n    const indentItems = [\n      // Items for indent-001 (Smith Wedding)\n      {\n        id: 'indent-item-001',\n        indent_id: 'indent-001',\n        item_name: 'Chicken (Fresh)',\n        category: 'Meat',\n        quantity: 25.00,\n        unit: 'kg',\n        is_in_stock: false,\n        is_received: true,\n        received_at: '2024-12-14T10:00:00Z',\n        notes: 'Premium quality for wedding'\n      },\n      {\n        id: 'indent-item-002',\n        indent_id: 'indent-001',\n        item_name: 'Paneer (Fresh)',\n        category: 'Dairy',\n        quantity: 15.00,\n        unit: 'kg',\n        is_in_stock: true,\n        stock_id: 'stock-004',\n        is_received: true,\n        received_at: '2024-12-14T10:00:00Z'\n      },\n      {\n        id: 'indent-item-003',\n        indent_id: 'indent-001',\n        item_name: 'Basmati Rice',\n        category: 'Grains',\n        quantity: 20.00,\n        unit: 'kg',\n        is_in_stock: true,\n        stock_id: 'stock-001',\n        is_received: true,\n        received_at: '2024-12-14T09:30:00Z'\n      },\n      // Items for indent-002 (Corporate Dinner)\n      {\n        id: 'indent-item-004',\n        indent_id: 'indent-002',\n        item_name: 'Lettuce (Iceberg)',\n        category: 'Vegetables',\n        quantity: 10.00,\n        unit: 'kg',\n        is_in_stock: false,\n        is_received: false,\n        notes: 'For Caesar salad - must be fresh'\n      },\n      {\n        id: 'indent-item-005',\n        indent_id: 'indent-002',\n        item_name: 'Parmesan Cheese',\n        category: 'Dairy',\n        quantity: 2.00,\n        unit: 'kg',\n        is_in_stock: false,\n        is_received: false,\n        notes: 'Imported preferred'\n      }\n    ];\n\n    const { error: indentItemsError } = await supabase\n      .from('kitchen_indent_items')\n      .upsert(indentItems, { onConflict: 'id' });\n    \n    if (!indentItemsError) {\n      console.log('   ‚úÖ Indent items populated (5 items)');\n    } else {\n      console.log('   ‚ö†Ô∏è Indent items error:', indentItemsError.message);\n    }\n\n    // 7. Populate Stock Updates\n    console.log('üìä Populating Stock Updates...');\n    const stockUpdates = [\n      {\n        id: 'update-001',\n        stock_id: 'stock-001',\n        type: 'USED',\n        quantity: 20.00,\n        reason: 'Used for Smith Wedding - Biryani preparation',\n        updated_by: '550e8400-e29b-41d4-a716-446655440001'\n      },\n      {\n        id: 'update-002',\n        stock_id: 'stock-003',\n        type: 'ADDED',\n        quantity: 25.00,\n        reason: 'Fresh delivery from supplier',\n        updated_by: '550e8400-e29b-41d4-a716-446655440002'\n      },\n      {\n        id: 'update-003',\n        stock_id: 'stock-005',\n        type: 'USED',\n        quantity: 5.00,\n        reason: 'Used for birthday party cooking',\n        updated_by: '550e8400-e29b-41d4-a716-446655440004'\n      },\n      {\n        id: 'update-004',\n        stock_id: 'stock-012',\n        type: 'EXPIRED',\n        quantity: 2.00,\n        reason: 'Expired cream disposed as per safety protocol',\n        updated_by: '550e8400-e29b-41d4-a716-446655440002'\n      }\n    ];\n\n    const { error: stockUpdatesError } = await supabase\n      .from('kitchen_stock_updates')\n      .upsert(stockUpdates, { onConflict: 'id' });\n    \n    if (!stockUpdatesError) {\n      console.log('   ‚úÖ Stock updates populated (4 updates)');\n    } else {\n      console.log('   ‚ö†Ô∏è Stock updates error:', stockUpdatesError.message);\n    }\n\n    // Summary\n    console.log('\\nüéâ Data Population Completed!');\n    console.log('==============================');\n    console.log('‚úÖ Users: 5 (including chefs, manager, admin)');\n    console.log('‚úÖ Events: 5 (various types and statuses)');\n    console.log('‚úÖ Stock Items: 12 (comprehensive inventory)');\n    console.log('‚úÖ Cooking Tasks: 5 (different statuses)');\n    console.log('‚úÖ Indents: 3 (purchase requisitions)');\n    console.log('‚úÖ Indent Items: 5 (detailed requirements)');\n    console.log('‚úÖ Stock Updates: 4 (transaction history)');\n    console.log('\\nüîë Test Users:');\n    console.log('   - chef@butta.com (John Chef - CHEF)');\n    console.log('   - manager@butta.com (Sarah Manager - KITCHEN_MANAGER)');\n    console.log('   - admin@butta.com (Admin User - ADMIN)');\n    console.log('   - chef2@butta.com (Maria Rodriguez - CHEF)');\n    console.log('   - chef3@butta.com (Raj Patel - CHEF)');\n    console.log('\\nüìä Data Features:');\n    console.log('   ‚úÖ Low stock alerts (Salt)');\n    console.log('   ‚úÖ Expiring items (Fresh Cream)');\n    console.log('   ‚úÖ Active cooking tasks');\n    console.log('   ‚úÖ Various event statuses');\n    console.log('   ‚úÖ Complete workflow examples');\n    console.log('\\nüöÄ Ready for Testing!');\n    console.log('   Run: npm run dev');\n    console.log('   Access: http://localhost:5173/kitchen');\n\n  } catch (error) {\n    console.error('\\n‚ùå Population failed:', error.message);\n    console.error('\\nüí° Troubleshooting:');\n    console.error('   1. Ensure tables are created in Supabase');\n    console.error('   2. Check network connection');\n    console.error('   3. Verify Supabase project is active');\n  }\n}\n\npopulateData();"