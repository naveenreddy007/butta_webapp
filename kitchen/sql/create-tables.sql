-- Kitchen Module Database Tables for Supabase\n-- Run this SQL in Supabase Dashboard > SQL Editor\n\n-- Enable UUID extension if not already enabled\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Create enums\nCREATE TYPE user_role AS ENUM ('CHEF', 'KITCHEN_MANAGER', 'ADMIN');\nCREATE TYPE event_status AS ENUM ('PLANNED', 'INDENT_CREATED', 'COOKING_STARTED', 'COOKING_COMPLETED', 'EVENT_COMPLETED');\nCREATE TYPE indent_status AS ENUM ('DRAFT', 'SUBMITTED', 'APPROVED', 'IN_PROGRESS', 'COMPLETED');\nCREATE TYPE stock_update_type AS ENUM ('ADDED', 'USED', 'EXPIRED', 'RETURNED', 'ADJUSTED');\nCREATE TYPE cooking_status AS ENUM ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'ON_HOLD', 'CANCELLED');\nCREATE TYPE priority AS ENUM ('LOW', 'NORMAL', 'HIGH', 'URGENT');\n\n-- Kitchen Users table\nCREATE TABLE IF NOT EXISTS kitchen_users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    role user_role NOT NULL DEFAULT 'CHEF',\n    phone VARCHAR(50),\n    is_active BOOLEAN NOT NULL DEFAULT true,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Events table\nCREATE TABLE IF NOT EXISTS kitchen_events (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) NOT NULL,\n    date TIMESTAMP WITH TIME ZONE NOT NULL,\n    guest_count INTEGER NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    status event_status NOT NULL DEFAULT 'PLANNED',\n    menu_items JSONB,\n    assigned_chef UUID REFERENCES kitchen_users(id),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Stock table\nCREATE TABLE IF NOT EXISTS kitchen_stock (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    item_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    quantity DECIMAL(10,2) NOT NULL,\n    unit VARCHAR(50) NOT NULL,\n    expiry_date TIMESTAMP WITH TIME ZONE,\n    batch_number VARCHAR(100),\n    supplier VARCHAR(255),\n    cost_per_unit DECIMAL(10,2),\n    is_active BOOLEAN NOT NULL DEFAULT true,\n    min_stock DECIMAL(10,2),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Stock Updates table\nCREATE TABLE IF NOT EXISTS kitchen_stock_updates (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    stock_id UUID NOT NULL REFERENCES kitchen_stock(id) ON DELETE CASCADE,\n    type stock_update_type NOT NULL,\n    quantity DECIMAL(10,2) NOT NULL,\n    reason TEXT,\n    updated_by UUID NOT NULL REFERENCES kitchen_users(id),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Indents table\nCREATE TABLE IF NOT EXISTS kitchen_indents (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    event_id UUID NOT NULL REFERENCES kitchen_events(id) ON DELETE CASCADE,\n    status indent_status NOT NULL DEFAULT 'DRAFT',\n    total_items INTEGER DEFAULT 0,\n    created_by UUID NOT NULL REFERENCES kitchen_users(id),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Indent Items table\nCREATE TABLE IF NOT EXISTS kitchen_indent_items (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    indent_id UUID NOT NULL REFERENCES kitchen_indents(id) ON DELETE CASCADE,\n    item_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    quantity DECIMAL(10,2) NOT NULL,\n    unit VARCHAR(50) NOT NULL,\n    is_in_stock BOOLEAN DEFAULT false,\n    stock_id UUID REFERENCES kitchen_stock(id),\n    is_received BOOLEAN DEFAULT false,\n    received_at TIMESTAMP WITH TIME ZONE,\n    notes TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Cooking Logs table\nCREATE TABLE IF NOT EXISTS kitchen_cooking_logs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    event_id UUID NOT NULL REFERENCES kitchen_events(id) ON DELETE CASCADE,\n    dish_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    servings INTEGER NOT NULL,\n    status cooking_status NOT NULL DEFAULT 'NOT_STARTED',\n    assigned_to UUID NOT NULL REFERENCES kitchen_users(id),\n    started_at TIMESTAMP WITH TIME ZONE,\n    completed_at TIMESTAMP WITH TIME ZONE,\n    estimated_time INTEGER, -- in minutes\n    notes TEXT,\n    priority priority NOT NULL DEFAULT 'NORMAL',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Kitchen Leftovers table\nCREATE TABLE IF NOT EXISTS kitchen_leftovers (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    event_id UUID NOT NULL REFERENCES kitchen_events(id),\n    item_name VARCHAR(255) NOT NULL,\n    quantity DECIMAL(10,2) NOT NULL,\n    unit VARCHAR(50) NOT NULL,\n    stock_id UUID REFERENCES kitchen_stock(id),\n    is_returned BOOLEAN DEFAULT false,\n    returned_at TIMESTAMP WITH TIME ZONE,\n    estimated_cost DECIMAL(10,2),\n    notes TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_kitchen_events_date ON kitchen_events(date);\nCREATE INDEX IF NOT EXISTS idx_kitchen_events_status ON kitchen_events(status);\nCREATE INDEX IF NOT EXISTS idx_kitchen_events_assigned_chef ON kitchen_events(assigned_chef);\n\nCREATE INDEX IF NOT EXISTS idx_kitchen_stock_category ON kitchen_stock(category);\nCREATE INDEX IF NOT EXISTS idx_kitchen_stock_is_active ON kitchen_stock(is_active);\nCREATE INDEX IF NOT EXISTS idx_kitchen_stock_expiry_date ON kitchen_stock(expiry_date);\n\nCREATE INDEX IF NOT EXISTS idx_kitchen_cooking_logs_status ON kitchen_cooking_logs(status);\nCREATE INDEX IF NOT EXISTS idx_kitchen_cooking_logs_assigned_to ON kitchen_cooking_logs(assigned_to);\nCREATE INDEX IF NOT EXISTS idx_kitchen_cooking_logs_event_id ON kitchen_cooking_logs(event_id);\nCREATE INDEX IF NOT EXISTS idx_kitchen_cooking_logs_priority ON kitchen_cooking_logs(priority);\n\nCREATE INDEX IF NOT EXISTS idx_kitchen_indents_status ON kitchen_indents(status);\nCREATE INDEX IF NOT EXISTS idx_kitchen_indents_event_id ON kitchen_indents(event_id);\n\n-- Enable Row Level Security (RLS)\nALTER TABLE kitchen_users ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_events ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_stock ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_stock_updates ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_indents ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_indent_items ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_cooking_logs ENABLE ROW LEVEL SECURITY;\nALTER TABLE kitchen_leftovers ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies (basic policies - can be customized later)\nCREATE POLICY \"Enable read access for all users\" ON kitchen_users FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_users FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_users FOR UPDATE USING (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_events FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_events FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_events FOR UPDATE USING (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_stock FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_stock FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_stock FOR UPDATE USING (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_stock_updates FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_stock_updates FOR INSERT WITH CHECK (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_indents FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_indents FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_indents FOR UPDATE USING (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_indent_items FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_indent_items FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_indent_items FOR UPDATE USING (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_cooking_logs FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_cooking_logs FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_cooking_logs FOR UPDATE USING (true);\n\nCREATE POLICY \"Enable read access for all users\" ON kitchen_leftovers FOR SELECT USING (true);\nCREATE POLICY \"Enable insert for authenticated users\" ON kitchen_leftovers FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Enable update for authenticated users\" ON kitchen_leftovers FOR UPDATE USING (true);\n\n-- Create updated_at trigger function\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Create triggers for updated_at\nCREATE TRIGGER update_kitchen_users_updated_at BEFORE UPDATE ON kitchen_users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_kitchen_events_updated_at BEFORE UPDATE ON kitchen_events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_kitchen_stock_updated_at BEFORE UPDATE ON kitchen_stock FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_kitchen_indents_updated_at BEFORE UPDATE ON kitchen_indents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_kitchen_indent_items_updated_at BEFORE UPDATE ON kitchen_indent_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_kitchen_cooking_logs_updated_at BEFORE UPDATE ON kitchen_cooking_logs FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\nCREATE TRIGGER update_kitchen_leftovers_updated_at BEFORE UPDATE ON kitchen_leftovers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Insert sample data\nINSERT INTO kitchen_users (id, email, name, role, phone, is_active) VALUES\n('550e8400-e29b-41d4-a716-446655440001', 'chef@butta.com', 'John Chef', 'CHEF', '+1234567890', true),\n('550e8400-e29b-41d4-a716-446655440002', 'manager@butta.com', 'Sarah Manager', 'KITCHEN_MANAGER', '+1234567891', true),\n('550e8400-e29b-41d4-a716-446655440003', 'admin@butta.com', 'Admin User', 'ADMIN', '+1234567892', true)\nON CONFLICT (email) DO NOTHING;\n\nINSERT INTO kitchen_events (id, name, date, guest_count, event_type, status, assigned_chef) VALUES\n('event-001', 'Smith Wedding Reception', '2024-12-15T18:00:00Z', 150, 'Wedding', 'PLANNED', '550e8400-e29b-41d4-a716-446655440001'),\n('event-002', 'Corporate Annual Dinner', '2024-12-20T19:00:00Z', 200, 'Corporate', 'PLANNED', '550e8400-e29b-41d4-a716-446655440002')\nON CONFLICT (id) DO NOTHING;\n\nINSERT INTO kitchen_stock (id, item_name, category, quantity, unit, cost_per_unit, min_stock, is_active) VALUES\n('stock-001', 'Basmati Rice', 'Grains', 100.00, 'kg', 2.50, 20.00, true),\n('stock-002', 'Chicken Breast', 'Meat', 50.00, 'kg', 8.00, 10.00, true),\n('stock-003', 'Tomatoes', 'Vegetables', 25.00, 'kg', 3.00, 5.00, true),\n('stock-004', 'Onions', 'Vegetables', 30.00, 'kg', 2.00, 10.00, true)\nON CONFLICT (id) DO NOTHING;\n\n-- Success message\nSELECT 'Kitchen Module tables created successfully!' as message;"