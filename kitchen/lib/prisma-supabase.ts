/**\n * Prisma Client Configuration for Supabase\n * \n * This sets up Prisma to work with the existing Supabase database\n */\n\nimport { PrismaClient } from '@prisma/client';\nimport { createClient } from '@supabase/supabase-js';\n\n// Load environment variables\nconst SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://kbonzhebgmehulkdkyas.supabase.co';\nconst SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtib256aGViZ21laHVsa2RreWFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1ODY1MjQsImV4cCI6MjA2OTE2MjUyNH0.7yYNyj8i6B0ZZ5C17VsA4SinMUjaOnADPA_T_qBWh-c';\n\n// Create Supabase client for direct database operations\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\n// Prisma client (will be initialized when DATABASE_URL is available)\nlet prismaClient: PrismaClient | null = null;\n\n/**\n * Get or create Prisma client\n */\nexport function getPrismaClient(): PrismaClient | null {\n  if (!process.env.DATABASE_URL) {\n    console.warn('DATABASE_URL not set, Prisma client not available');\n    return null;\n  }\n  \n  if (!prismaClient) {\n    prismaClient = new PrismaClient({\n      log: ['query', 'error', 'warn'],\n      errorFormat: 'pretty',\n    });\n  }\n  \n  return prismaClient;\n}\n\n/**\n * Database utilities that work with both Supabase and Prisma\n */\nexport const dbUtils = {\n  /**\n   * Test Supabase connection\n   */\n  async testSupabaseConnection(): Promise<boolean> {\n    try {\n      const { data, error } = await supabase\n        .from('kitchen_users')\n        .select('count')\n        .limit(1);\n      \n      if (error && !error.message.includes('does not exist')) {\n        throw error;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Supabase connection failed:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Test Prisma connection\n   */\n  async testPrismaConnection(): Promise<boolean> {\n    const prisma = getPrismaClient();\n    if (!prisma) return false;\n    \n    try {\n      await prisma.$queryRaw`SELECT 1`;\n      return true;\n    } catch (error) {\n      console.error('Prisma connection failed:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Check if tables exist using Supabase\n   */\n  async checkTablesExist(): Promise<string[]> {\n    const tables = [\n      'kitchen_users',\n      'kitchen_events', \n      'kitchen_stock',\n      'kitchen_cooking_logs',\n      'kitchen_indents',\n      'kitchen_indent_items',\n      'kitchen_stock_updates',\n      'kitchen_leftovers'\n    ];\n    \n    const existingTables: string[] = [];\n    \n    for (const table of tables) {\n      try {\n        const { data, error } = await supabase\n          .from(table)\n          .select('*')\n          .limit(1);\n        \n        if (!error || !error.message.includes('does not exist')) {\n          existingTables.push(table);\n        }\n      } catch (error) {\n        // Table doesn't exist\n      }\n    }\n    \n    return existingTables;\n  },\n\n  /**\n   * Create tables using Supabase SQL\n   */\n  async createTables(): Promise<boolean> {\n    try {\n      // This would require the service role key to execute SQL\n      // For now, we'll return false and require manual table creation\n      console.log('Tables need to be created manually in Supabase Dashboard');\n      return false;\n    } catch (error) {\n      console.error('Failed to create tables:', error);\n      return false;\n    }\n  }\n};\n\n/**\n * Seed data utilities using Supabase\n */\nexport const seedUtils = {\n  /**\n   * Create default users\n   */\n  async createDefaultUsers() {\n    const users = [\n      {\n        id: '550e8400-e29b-41d4-a716-446655440001',\n        email: 'chef@butta.com',\n        name: 'John Chef',\n        role: 'CHEF',\n        phone: '+1234567890',\n        is_active: true\n      },\n      {\n        id: '550e8400-e29b-41d4-a716-446655440002',\n        email: 'manager@butta.com',\n        name: 'Sarah Manager',\n        role: 'KITCHEN_MANAGER',\n        phone: '+1234567891',\n        is_active: true\n      },\n      {\n        id: '550e8400-e29b-41d4-a716-446655440003',\n        email: 'admin@butta.com',\n        name: 'Admin User',\n        role: 'ADMIN',\n        phone: '+1234567892',\n        is_active: true\n      }\n    ];\n\n    try {\n      const { error } = await supabase\n        .from('kitchen_users')\n        .upsert(users, { onConflict: 'email' });\n      \n      if (error) {\n        throw error;\n      }\n      \n      console.log('✅ Default users created');\n      return true;\n    } catch (error) {\n      console.error('Failed to create users:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Create sample data\n   */\n  async createSampleData() {\n    try {\n      // Create sample events\n      const { error: eventsError } = await supabase\n        .from('kitchen_events')\n        .upsert([\n          {\n            id: 'event-001',\n            name: 'Smith Wedding Reception',\n            date: '2024-12-15T18:00:00Z',\n            guest_count: 150,\n            event_type: 'Wedding',\n            status: 'PLANNED',\n            assigned_chef: '550e8400-e29b-41d4-a716-446655440001'\n          },\n          {\n            id: 'event-002',\n            name: 'Corporate Annual Dinner',\n            date: '2024-12-20T19:00:00Z',\n            guest_count: 200,\n            event_type: 'Corporate',\n            status: 'PLANNED',\n            assigned_chef: '550e8400-e29b-41d4-a716-446655440002'\n          }\n        ], { onConflict: 'id' });\n\n      if (!eventsError) {\n        console.log('✅ Sample events created');\n      }\n\n      // Create sample stock\n      const { error: stockError } = await supabase\n        .from('kitchen_stock')\n        .upsert([\n          {\n            id: 'stock-001',\n            item_name: 'Basmati Rice',\n            category: 'Grains',\n            quantity: 100.00,\n            unit: 'kg',\n            cost_per_unit: 2.50,\n            min_stock: 20.00,\n            is_active: true\n          },\n          {\n            id: 'stock-002',\n            item_name: 'Chicken Breast',\n            category: 'Meat',\n            quantity: 50.00,\n            unit: 'kg',\n            cost_per_unit: 8.00,\n            min_stock: 10.00,\n            is_active: true\n          }\n        ], { onConflict: 'id' });\n\n      if (!stockError) {\n        console.log('✅ Sample stock created');\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to create sample data:', error);\n      return false;\n    }\n  }\n};\n\nexport default { supabase, getPrismaClient, dbUtils, seedUtils };"